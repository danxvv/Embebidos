/******************************************************************************
*
* Copyright (C) 2002 - 2015 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/
/*****************************************************************************/
/**
* @file xgpio_example.c
*
* This file contains a design example using the AXI GPIO driver (XGpio) and
* hardware device.  It only uses channel 1 of a GPIO device and assumes that
* the bit 0 of the GPIO is connected to the LED on the HW board.
*
*
* <pre>
* MODIFICATION HISTORY:
*
* Ver   Who  Date     Changes
* ----- ---- -------- -----------------------------------------------
* 1.00a rmm  03/13/02 First release
* 1.00a rpm  08/04/03 Removed second example and invalid macro calls
* 2.00a jhl  12/15/03 Added support for dual channels
* 2.00a sv   04/20/05 Minor changes to comply to Doxygen and coding guidelines
* 3.00a ktn  11/20/09 Minor changes as per coding guidelines.
* 4.1   lks  11/18/15 Updated to use canonical xparameters and
*		      clean up of the comments and code for CR 900381
* 4.3   sk   09/29/16 Modified the example to make it work when LED_bits are
*                     configured as an output. CR# 958644
*       ms   01/23/17 Added xil_printf statement in main function to
*                     ensure that "Successfully ran" and "Failed" strings
*                     are available in all examples. This is a fix for
*                     CR-965028.
*
* </pre>
******************************************************************************/

/***************************** Include Files *********************************/

#include <stdio.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xuartps.h"
#include "sleep.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define GPIO_0_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID
#define GPIO_1_DEVICE_ID  XPAR_GPIO_1_DEVICE_ID


#define LED_DELAY     300000000

/*
 * The following constant is used to determine which channel of the GPIO is
 * used for the LED if there are 2 channels supported.
 */
#define LED_CHANNEL 2
#define BT_CHANNEL 1
#define sw_channel 1


/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/


/************************** Variable Definitions *****************************/

/*
 * The following are declared globally so they are zeroed and so they are
 * easily accessible from a debugger
 */

XGpio botones,sw,leds; /* The Instance of the GPIO Driver */

/*****************************************************************************/
/**
*
* The purpose of this function is to illustrate how to use the GPIO
* driver to turn on and off an LED.
*
* @param	None
*
* @return	XST_FAILURE to indicate that the GPIO Initialization had
*		failed.
*
* @note		This function will not return if the test is running.
*
******************************************************************************/
int main(void)
{
	u32 boton,switc;
	char letra;
	/* Initialize the GPIO driver */
	XGpio_Initialize(&botones, GPIO_0_DEVICE_ID);
	XGpio_Initialize(&sw, GPIO_1_DEVICE_ID);
	XGpio_Initialize(&leds, GPIO_1_DEVICE_ID);
	letra = XUartPs_RecvByte(XPAR_XUARTPS_0_BASEADDR);
	xil_printf("%c",letra);
	XGpio_SetDataDirection(&leds, LED_CHANNEL, 0x0);
	XGpio_SetDataDirection(&botones, BT_CHANNEL, 0xF);
	XGpio_SetDataDirection(&sw,sw_channel,0xF);

	/* Loop forever blinking the LED */

	while (1) {
		switc = XGpio_DiscreteRead(&sw,sw_channel);
		boton = XGpio_DiscreteRead(&botones,BT_CHANNEL);

		if(boton == 0b0000 && switc == 0b00){
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0x0);
		}
		else if (boton == 0b0001 && switc == 0b00)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b000001);
		else if (boton == 0b0010 && switc == 0b00)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b000010);
		else if (boton == 0b0100 && switc == 0b00)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b000100);
		else if (boton == 0b1000 && switc == 0b00)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b001000);
		else if (boton == 0b0000 && switc == 0b01)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b010000);
		else if (boton == 0b0000 && switc == 0b10)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b100000);
		else if (boton == 0b0000 && switc == 0b11)
			XGpio_DiscreteWrite(&leds,LED_CHANNEL,0b101001);

	}
}
